name: semver-bump
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
  push:
    branches: [main]
permissions:
  contents: write
jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'github-actions[bot]' && github.event.head_commit.author.email != 'action@github.com' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get current version
        id: get_version
        run: |
          # Extract version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: determine_bump
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type || 'auto' }}"

          if [ "$VERSION_TYPE" != "auto" ]; then
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "Manual version type selected: $VERSION_TYPE"
            exit 0
          fi

          # Get commits since last version bump commit or last 10 commits if no version bump found
          LAST_VERSION_COMMIT=$(git log --oneline --grep="bump: bump version to" -n 1 --format="%H" || echo "")

          if [ -n "$LAST_VERSION_COMMIT" ]; then
            # Get commits since last version bump
            COMMITS=$(git log --oneline --format="%s" ${LAST_VERSION_COMMIT}..HEAD)
          else
            # If no previous version bump found, check last 10 commits
            COMMITS=$(git log --oneline --format="%s" -n 10)
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"

          # Check for breaking changes (BREAKING CHANGE in commit body or ! after type)
          HAS_BREAKING=false
          if git log --format="%B" ${LAST_VERSION_COMMIT}..HEAD | grep -q "BREAKING CHANGE\|^[a-zA-Z]\+!:" || \
             echo "$COMMITS" | grep -q "^[a-zA-Z]\+!:"; then
            HAS_BREAKING=true
          fi

          # Check for features and fixes
          HAS_FEAT=false
          HAS_FIX=false

          if echo "$COMMITS" | grep -q "^feat\|^feature"; then
            HAS_FEAT=true
          fi

          if echo "$COMMITS" | grep -q "^fix\|^bugfix"; then
            HAS_FIX=true
          fi

          # Determine bump type based on conventional commits
          if [ "$HAS_BREAKING" = true ]; then
            BUMP_TYPE="major"
          elif [ "$HAS_FEAT" = true ]; then
            BUMP_TYPE="minor"
          elif [ "$HAS_FIX" = true ]; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="patch"  # Default to patch for other commits
          fi

          echo "version_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Determined version bump type: $BUMP_TYPE"
          echo "Has breaking changes: $HAS_BREAKING"
          echo "Has features: $HAS_FEAT"
          echo "Has fixes: $HAS_FIX"

      - name: Calculate new version
        id: calc_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          VERSION_TYPE="${{ steps.determine_bump.outputs.version_type }}"

          # Split version into parts
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Bump version based on type
          case $VERSION_TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="$major.$minor.$patch"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (was $CURRENT_VERSION, bump type: $VERSION_TYPE)"

      - name: Update version in package.json
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          # Use Node.js to update package.json version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          echo "Updated package.json with version $NEW_VERSION"

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
            git diff
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          VERSION_TYPE="${{ steps.determine_bump.outputs.version_type }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "bump: bump version to $NEW_VERSION ($VERSION_TYPE)"
          git push

      - name: Create and push git tag
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          VERSION_TYPE="${{ steps.determine_bump.outputs.version_type }}"

          # Create annotated tag with release information
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION ($VERSION_TYPE bump)"

          # Push the tag to remote
          git push origin "v$NEW_VERSION"

          echo "Created and pushed tag: v$NEW_VERSION"
